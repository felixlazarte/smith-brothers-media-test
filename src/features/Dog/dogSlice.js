import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

const initialState = {
  isLoading: false,
  breedList: null,
  imageURL: [],
  errors: null
};

export const dogSlice = createSlice({
  name: 'dog',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchDogImages.pending, (state) => {
        state.isLoading = true;
        state.imageURL = [];
      })
      .addCase(fetchDogImages.fulfilled, (state, action) => {
        state.isLoading = false;
        state.imageURL = action.payload.message;
        state.errors = null;
      })
      .addCase(fetchDogImages.rejected, (state, action) => {
        state.isLoading = false;
        state.errors = action.payload;
        state.imageURL = [];
      })

      .addCase(fetchBreedList.pending, (state) => {
        state.isLoading = true;
        state.breedList = null;
      })
      .addCase(fetchBreedList.fulfilled, (state, action) => {
        state.isLoading = false;
        state.breedList = action.payload.message;
        state.errors = null;
      })
      .addCase(fetchBreedList.rejected, (state, action) => {
        state.isLoading = false;
        state.errors = action.payload;
        state.breedList = null;
      })
  }
});

export const fetchDogImages = createAsyncThunk('get/fetchDogImages',
  async ({ breed }, {rejectWithValue}) => {
    try {
      const response = await axios.get(`https://dog.ceo/api/breed/${breed}/images/random/5`);
      return response.data;
    } catch (err) {
      // Use `err.response.data` as `action.payload` for a `rejected` action,
      // by explicitly returning it using the `rejectWithValue()` utility
      return rejectWithValue(err.response.data)
    }
  }
);

export const fetchBreedList = createAsyncThunk('get/fetchBreedList',
  async (_, {rejectWithValue}) => {
    try {
      const response = await axios.get(`https://dog.ceo/api/breeds/list/all`);
      return response.data;
    } catch (err) {
      // Use `err.response.data` as `action.payload` for a `rejected` action,
      // by explicitly returning it using the `rejectWithValue()` utility
      return rejectWithValue(err.response.data)
    }
  }
);

// The function below is called a selector and allows us to select a value from
// the state.
export const getDogState = (state) => state.dog;

export default dogSlice.reducer;
